#!/usr/bin/perl
%{
    use SubstParser;

    my $script_end = 0;

    my $indent = 0;
	my $i = "";
	my @switch_stack = ();
%}
%%
script:  	BEGIN statement_list END
        { 
            $script_end = 1;
			$_[2];
        }
        ;

sr:		{
			$indent += 4;
			$i = (" " x $indent);
		}
		;

sl:		{
			$indent -= 4;
			$i = (" " x $indent);
		}
		;

statement_list: 
			istmt
		| 	statement_list istmt
		{
			"$_[1]$_[2]";
		}
        ;

istmt:		statement
		{
			"$i$_[1]";
		}
		;

elseif:    
		{
			""
		}
        | 	elseif ELSEIF sr statement_list sl
		{
			"$_[1]${i}else if($_[2]) {\n$_[4]$i}\n";
		}
        ;

case_list:
		{
			{ cases => "", defaults => "" };
		}
		| 	case_list CASE sr statement_list sl
		{
			$_[1]->{cases} .= "${i}if($switch_stack[0] == $_[2]) {\n$_[4]$i}\n";
			$_[1];
		}
		| 	case_list DEFAULT sr statement_list sl
		{
			$_[1]->{defaults} .= $_[4];
			$_[1];
		}
		;

comments:
		{
			"";
		}
		| 	comments COMMENT
		{
			"$_[1]$i/* $_[2] */\n";
		}
		;

switch:	   SWITCH 
		{
			unshift @switch_stack, $_[1];
		}
			sr comments case_list sl END
		{
			shift @switch_stack;
			"for(;true;) {\n$_[4]$_[5]->{cases}$_[5]->{defaults}${i}    break;\n$i}\n";
		}
		;

statement: IF sr statement_list sl elseif END
		{
			"if($_[1]) {\n$_[3]$i}\n$_[5]\n";
		}
        |  IF sr statement_list sl elseif ELSE sr statement_list sl END
		{
			"if($_[1]) {\n$_[3]$i}\n$_[5]${i}else {\n$_[8]$i}\n";
		}
        |  WHILE statement_list END 
		{
			"for(;$_[1];) {\n$_[2]$i}\n";
		}
        |  FOREACH sr sr statement_list sl sl END 
		{
                        qq {{
$i    var i, words;
$i    words = subst("$_[1]->[1]").split(" ");
$i    for(i=0;i<words.size();i=i+1) {
$i        set("$_[1]->[0]", words[i]);
$_[4]
$i    }
$i}
}
		}
        |  switch
        |  BREAK
		{
			"break;\n";
		}
        |  HALT
		{
			"return return_value;\n";
		}
        |  RETURN
		{
			"return_value = $_[1];\n";
		}
        |  COMMENT
		{
			"/* $_[1] */\n";
		}
        |  SUBST
        {
            &SubstParser::parse_subst($_[1]) . ";\n";
        }   
        ;
           

%%

sub make_lexer {
    my $line = shift;
    my @input = split(/\n/, $$line);
    unshift @input, "begin";

    my $lexer_sub = sub {
        my $parser = shift;

        return ('', undef) if $script_end == 1;

        $_ = shift @input;

        chomp;
        return ('END', '') unless defined $_;
        s/^\s*//;

        m{^\s*\*(.*)$}     and return ('COMMENT', $1);
        m{^\s*$}           and return ('COMMENT', '');
        m{^begin\b(.*)$}   and return ('BEGIN', $1);
        m{^if\b(.*)$}      and return ('IF', $1);
        m{^elseif\b(.*)$}  and return ('ELSEIF', $1);
        m{^else\b(.*)$}    and return ('ELSE', $1);
        m{^endif\b(.*)$}   and return ('END', $1);
        m{^end\b(.*)$}     and return ('END', $1);
        m{^while\b(.*)$}   and return ('WHILE', $1);
        m{^done\b(.*)$}    and return ('END', $1);
        m{^foreach\b *([^ ]+) *(.*)$} and return ('FOREACH', [$1, $2]);
        m{^switch\b(.*)$}  and return ('SWITCH', $1);
        m{^case\b(.*)$}    and return ('CASE', $1);
        m{^break\b(.*)$}   and return ('BREAK', $1);
        m{^default\b(.*)$} and return ('DEFAULT', $1);
        m{^halt\b(.*)$}    and return ('HALT', $1);
        m{^return\b(.*)$}  and return ('RETURN', $1); # XXX not what you think it is

        return ('SUBST', $_);
    };

    return sub {
        my ($arg1, $arg2) = &$lexer_sub(@_);
        print "($arg1) = ($arg2)\n";
        return ($arg1, $arg2);
    };
}

sub parse_body {
    my $input = shift;
    
    $script_end = 0;
    my $parser=new DGParser();
    print "input=$$input=\n";
    my $value=$parser->YYParse(yylex => &DGParser::make_lexer($input));
    
    print $value;
}

